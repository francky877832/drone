import json
import random
from models.drone import Drone
from models.delivery import Delivery
from models.no_fly_zone import NoFlyZone
from algorithms.graph_builder import build_graph
from ga.population import generate_initial_population, generate_initial_smart_population
from utils.constraints import check_constraints, check_constraints_with_penality
from ga.ga import crossover, mutate
from ga.fitness import compute_fitness 




with open("scenario1.json", "r") as f:
    data = json.load(f)

drones = [Drone(**d) for d in data["drones"]]
deliveries = [Delivery(**d) for d in data["deliveries"]]
no_fly_zones = [NoFlyZone(**z) for z in data["no_fly_zones"]]
population_size = len(drones)

# print(drones[0].max_weight)

graph = build_graph(drones[0].start_pos, deliveries)

#print("Graphe généré :", graph)

print("\nGénération de la population initiale...")
population = generate_initial_population(drones, deliveries, size=5)
population = generate_initial_smart_population(drones, deliveries, size=5)

def check_empty_population(population):
    for idx, individu in enumerate(population):
        if all(len(livraisons) == 0 for livraisons in individu.values()):
            print(f"Birey {idx + 1}: Hiçbir drone'a teslimat atanmamış. Yebi bir senaryo seciniz.")





def run_genetic_algorithm(drones, deliveries, no_fly_zones, generations=20, population_size=5):
    # Başlangıç popülasyonunu oluştur
    population = generate_initial_smart_population(drones, deliveries, population_size)
    check_empty_population(population)
    for gen in range(generations):
        print(f"\n{gen + 1}. Nesil:")

        fitness_scores = []
        for i, individual in enumerate(population):
            score, violations = compute_fitness(individual, drones, deliveries, no_fly_zones)
            fitness_scores.append((individual, score))
            print(f"Birey {i+1} : Fitness = {score:.2f}, İhlaller = {len(violations)}")

        # En iyi bireyleri sırala (fitness'e göre azalan)
        fitness_scores.sort(key=lambda x: x[1], reverse=True)
        best_individuals = [fs[0] for fs in fitness_scores[:2]]  # elitizm: en iyi 2 birey korunur

        # Yeni nesil için liste hazırla
        new_population = best_individuals[:]

        # Yeni bireyler üret
        while len(new_population) < population_size:
            parent1 = random.choice(best_individuals)
            parent2 = random.choice(best_individuals)
            child = crossover(parent1, parent2)
            mutated_child = mutate(child)
            new_population.append(mutated_child)

        population = new_population

    # En iyi bireyi döndür
    best_ind, best_score = max(fitness_scores, key=lambda x: x[1])
    print(f"\nEn iyi birey bulundu. Fitness = {best_score:.2f}")
    return best_ind

print("Gelişim başlatılıyor...")
best_solution = run_genetic_algorithm(drones, deliveries, no_fly_zones)
print(best_solution)


